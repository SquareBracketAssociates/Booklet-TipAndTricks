!! Tricks to compute hash numbers

In Pharo every object has a hash number. This hash is important to be able to store objects in a bucket-based data structures such as dictionaries and sets. This is the same in Java or C\#. 

This chapter is based on exchange on the Pharo-dev mailing-list.
And in particular from David Allouche.


!!! Hash

The hash number is a partial function from the space of the objects to the given range (12 bits). It means that two objects may have the same hash but that the hash computation should try to minimise the occurrence of such a situation. 

In Pharo the method responsible for the hash number computation is the method ==hash==. In fact as a programmers you should redefine this method
when the method ==\=== is redefined. 







!! Property

It must have one required property which is required data integrity:

!!!! A. 
Objects that are equal according to ==\=== must have equal hashes.


It should have two desirable properties that are required to support the algorithmic assumptions of bucket-based data structures:

!!!! B. 
Objects that are not equal should have different hashes. Ideally, the probability of hash collision should by 1/N where N is the size of hash value space.

!!!! C. 

The hash values should spread as much as possible over their value space. For example: ProtoObject>>#identityHash.


